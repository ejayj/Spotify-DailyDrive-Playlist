# PythonSpotifyAPI
Creates a custom 'my daily drive' spotify playlist with your choice of music and podcasts

#Getting Started
- Create Venv with At Least Python 3.10 using vscode command pallet [cmd + shift + p]
- Use "source ./venv/bin/activate" to activate venv [Alternatively "source .venv/bin/activate"]
- To deactivate/exit venv, use "deactivate"
- Install dependencies using: "pip install requirements.txt -r" (may need to append python3 or python to begining)
- Install Mongodb, and run in background

#How To Run Application
- Start mongodb in terminal using "brew services start/stop mongodb-community" [Alternative us mongodb-community8.0]
- Use "python -m flask run"
- Alternatively: Use "python3 app.py" , "flask run app.py", or "flask --app hello run --debug"

#Info
- To run flask shell use "python -m flask shell"
- SQL-Db can be initiallized using flask init-db, but should automatically be done with flask using db.commit_all()
- To see which version using python3 --version
- Project requires pythong 3.10

#How to Install MongoDb (OS X)
- install homebrew
- install mongodb via homebrew
- run using "brew services start mongodb-community@8.0 [or stop, can also take out @8.0]"
- Dont forget to start MongoDb before application!
- to check if mongodb is working: brew services list

#MongoDb: Mongosh:
- To Access mongodb, use "mongosh" in termianl
- Alternatively, install mongodb compass for a gui of database

add notes for how to srt up db, add react app
See private notesin instance.txt

TODO: 
==========
#Landing Page Idea
- have homescreen an example of how it works, linked to a generic spotify playlist; without user having to login
- let them change podcast and songs
- only thing- if not logged in, cant save work

#Search Feature 
- work on search feature that allows potential options that are possible matches/similar to show up in drop down menu
- add feature when you search up a podcast, it qautomatially pops up with possible matches for you to click on

#Playlist Presets
- allow them to save build presets for each podcast/playlist
- set up playlist images
- if playlist amount is <10 (or 28 I think is the required number); fill rest w/ spotify reccomendation songs

#Podcast & Poisitioning Presets
- allow user to input what track position they want their playlist ("e.g. ABC New: position 2 (after intro track); can[t be 2])
- however it will be default to the presets I put in (2+1+4+4+4 songs inbetween. 1 is locked)
- if user does not have my setup=> add a podcast after first one automatically?
- if user has mental health podcast, place that right after podcast number 1 ?
- if ERROR PODCASTS UPDATING; time.sleep(3600) or come back later message? - if ERROR PODCASTS UPDATING => time.skeep(30 secs) then retry, message repeat only 2 more times before saying (error try again- podcasts updating) =>OR go to eventually=> let user know podcast will be ready in 5 mins
- force user to add at least 2-3 podcast? if user has less than 3-5 podcasts, add your own? add mental health podcast if user doesnt?

#Notes To Self:



#Major Improvements:
- setup auto-update for podcasts while server runs
- once the session.get token expires, run auth.get token again (it will automatically update session(token))
:session.get('tokentimeout')
- last security risk: placing code in browser's url; have flask redirect user to basic home screen url when code is in url (redirect twice, take in code on back end?) redirect to api backend and redirect user front end to somewhere else

#Minor Fixes/Ideas
- retrieving playlist tracks can take a while; wait wheel; maybe it's better to retrieve a random song and add it to the playlist one at a time, for each podcast there is. that way, if there is an error, we can isolate it and retry with a new random song or podcast
- allow user to shift which podcast goes first on playlist (drag and drop)

General Notes:
====================================
Next time I have an issue, lets see what actual url request is getting sent over to spotify so i can zero in on the issue.
make sure the url works for new users
If i want another user to use my app, i have to approve them
change all the ip address from 127.0.0.1:80 or 5000 to something else?
finish complining todo list to here from all around code?
add react?

do a get my playlist button? whats this note mean?